CYRILLIC_SYMBOLS = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяєіїґ"
TRANSLATION = ("a", "b", "v", "g", "d", "e", "e", "j", "z", "i", "j", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u",
               "f", "h", "ts", "ch", "sh", "sch", "", "y", "", "e", "yu", "ya", "je", "i", "ji", "g")
Cyrillic =list(CYRILLIC_SYMBOLS)
Cyrillic = tuple(Cyrillic)    
TRANS = {}
for c, l in zip(Cyrillic, TRANSLATION):
    TRANS[ord(c)] = l
    TRANS[ord(c.upper())] = l.upper()

def translate(text):
    return text.translate(TRANS)



grades = {"A": 5, "B": 5, "C": 4, "D": 3, "E": 3, "FX": 2, "F": 1}
students = {"Nick": "A", "Olga": "B", "Mike": "FX", "Anna": "C"}

#h = '{:>4}| {:<10}|{:^5}|{:^5}'.format('1','Nick',students["Nick"],grades[students["Nick"]])
#print(h)
def formatted_grades(students):
    n = 0
   
    table = []
    for i in students:
        n +=1
        h = '{:>4}|{:<10}|{:^5}|{:^5}'.format(n, i, students[i],grades[students[i]])
        table.append(h)    
    return table    
students = {'Nick': 'A', 'Olga': 'B', 'Boris': 'FX', 'Anna': 'C'}


def formatted_numbers():
    table = []
    head = '|{:^10}|{:^10}|{:^10}|'.format('decimal', 'hex', 'binary')
    table.append(head)
    for i in range(16):
        h = '|{0:<10d}|{0:^10x}|{0:>10b}|'.format(i)
        table.append(h)
    return table

'''for el in formatted_numbers():
    print(el)'''

import re


def find_word(word, text):
    resul = re.search(word, text)
    if resul != None:
        d = {'result':  True,
            'first_index': resul.start(),
            'last_index': resul.end(),
            'search_string': word,
            'string': text}
    else:
        d = {'result':  False,
         'first_index': resul,
         'last_index': resul,
         'search_string': word,
         'string': text}
    return d
word = '@'  



def replace_spam_words(text, spam_words):
    for i in spam_words:
        res = re.search(i, text, flags = re.IGNORECASE)        
        if None == res:
            continue
        else:
            text = re.sub(i, '*'*len(i), text, flags = re.IGNORECASE)
            
    return text        
#print(replace_spam_words(text, spam))

def find_all_emails(text):
    result = re.findall(r"[A-Za-z]+[A-Za-z0-9._]+[@][A-Za-z]{2,}[.][A-Za-z]{2,}", text)
    return result

def find_all_phones(text):
    
   
    result =  re.findall(r"\+380\(\d{2}\)\d{3}-(?:\d{1}-\d{3}|\d{2}-\d{2})", text)
 
    
    return result
    



def find_all_links(text):
    result = []
    iterator = re.finditer(r"https?:\/\/(www\.)?\w{2,}(\.\w{2,})?(\.\w{2,})?", text)
    for match in iterator:
        result.append(match.group())
    return result



def flatten(dictionar) :
    # your code here
    dict2 ={}
    for x , y in dictionar.items():
      
        if type(y) is str:
            dict2[x] = y
            
        elif y == {}:
            dict2[x] = ''
        else:
            a = y.keys()
            for i in a:
                x1 = x + '/'+ i
                dict2[x1] = y[i]
                while type(y[i]) is not str and  y[i] != {}:
                    
                    dict2.pop(x1)
                    e1 = y[i]
                    e = e1.keys()
                    for t in e:
                        x2 = x1 + '/' + t
                        dict2[x2] = e1[t]
                        y[i] = e1[t]
                        x1 = x2
                        x2 = str(x2)
                        el = f'/{t}'
                        x1 = x2.removesuffix(el)
                        continue
                    x1 = x1 + '/' + t
                if type(y[i]) is str:
                    dict2[x1] = y[i]
            
                elif y[i] == {}:
                    dict2[x1] = ''        
                            
                
            
            
            
    return dict2
dd = {"key": {"deeper": {"more": {"enough": "value"}}}}
ss =  {
        "name": {"first": "One", "last": "Drone"},
        "job": "scout",
        "recent": {},
        "additional": {"place": {"zone": "1", "cell": "2"}},
    }
kk = {'name': {'first': 'Second', 'last': 'Drone', 'nick': {}}, 
      'job': {'1': 'scout', '2': 'worker', '3': 'writer', '4': 'reader', '5': 'learner'}, 
      'recent': {'places': {'earth': {'Louvre': '2015', 'NY': '2017', 'NP': ''}}, 'times': {'XX': {'1964': 'Yes'}, 'XXI': {'2064': 'Nope'}}}}
print(flatten(kk)) 